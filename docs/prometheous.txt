1. The rate function should only be used with counters, not gauges.
2. Prometheus label values may contain any Unicode characters, which includes hyphens. Ex: a=$__maybe_valid
3. Blackbox exporter compulsory query parameters:- Ex: target,module
4. Prometheus uses pull based metric ingestion.
5. Temporal aggregations(like:-[sum,max,min,avg,count]_[over_time]) retain the same number of results(metrics with unique labels) as input series.
6. Prometheus core components:-
    a. Prometheus (Server)
    b. PushGateway(cronjob,short interval metrics)
    c. Alertmanager
    d. Client Library(python,java,go)
    e. Exporters(ETCD Exporter,Node exporter).
7. Retention is  configured globally via the --storage.tsdb.retention.time command line flag.
8. "sum(http_requests_total{method="GET"} offset 5m)” is correct as this query uses the offset modifier in a valid way,
   immediately following the selector.
9. Alerts firing by prometheus only: ALERTS{alertstate="firing"}
   All the alerts firing: no such metrics (as Alerts can be sent to Alertmanager from other sources than Prometheus)
10. Inhibiting: When one type of alert fires, notifications should not be sent for a certain different type of alert
11. Symptoms of alerts cause the incidents.
12. Histogram quantile should be used with bucket.Ex: histogram_quantile(0.99, rate(http_request_duration_seconds_bucket[10m])
13. Prometheus exporter: A program that exposes metrics from a system that does not natively expose Prometheus metrics.
14. metric names cannot contain hyphens.Ex:-
    wrong: agate-remed-processes-running
    right: agate_remed_processes_running
 15. Not expose statistical aggregations(+,-) as metrics and instead calculate them via PromQL.
 16.Precedence:-
    1. ^
    2. *, /, %, atan2
    3. +, -
    4. ==, !=, <=, <, >=, >
    5. and, unless
    6. or
    Operators on the same precedence level are left-associative.
    For example, 2 * 3 % 2 is equivalent to (2 * 3) % 2.
    However ^ is right associative, so 2 ^ 3 ^ 2 is equivalent to 2 ^ (3
    ^ 2)
 17. In-flight request: Currently ongoing requests which being served.
 18. Prometheus expression:
     http_requests_total{status_code!~"5\\d{2}"}
     5: Matches the digit "5".
     \\d: Matches any digit (0–9). Double backslashes are required because PromQL uses Go regex, and the \ character must be escaped.
     {2}: Specifies exactly two digits.
     Combined: Matches strings like "500", "503", "599", etc.
     So, it Excludes status codes strictly in the range 500–599.
19. If 5xx: Matches strings(alphanumeric) like "5xx" (not actual status codes but a literal label value if present).
20. Over the time = temporal aggregation(avg_over_time,sum_over_time),Dimensional aggregation=sum,min,max,avg
21. Pillers of observability:- log,trace,metrics
22. The prom query (count,sum,avg,etc) by the job label(job=node), so that label will be retained in the output as {job=node} 7.
23. Prometheus does not recommended or support NFS.
24. delta that operates on gauge metrics while increase operates on counter metrics.
25. query that only includes the metric name will include that metric name in the result.Ex:-
    Query: http_request_duration_seconds_count
    result: http_request_duration_seconds_count 9
26. Heatmap overt time: displays the histogram with bucket.
27.  log is a textual record of an event often structured with key-value metadata.
28. dots are not valid for use in Prometheus metric names at all.
29. sum and count aggregations drop the metric name from the result.
30. Range selector:- metric_name[1h] here [1hr] is range selector.
31. logical binary operator (and, or or unless)
32. sum dimensional aggregation is not aggregating by any specific labels.
33. counter metrcs: increase,irate,reset.
34. idelta: gauge
35. vector matching keyword (on or ignoring)
36. Prometheus that references and evaluates alerting rules, not Alertmanager as it only manahes the alerts which gets
    generated by prometheus.
37. only histogram metrics can be arbitrarily broken down into quantiles at query time, not summaries.
38. exemplars most commonly associate a trace with a metric.
39. max_over_time aggregation only returns NaN if all values in the range interval are NaN
40. three principal components of the Prometheus exposition format: HELP,TYPE,One/More Metrics
41. Scrap Config: A common configuration specifying how to collect metrics from several targets
42. Scrap instance: A single target within a scrape job
43. Prometheus metrics registry: A set of metrics in an instrumented application that will be returned when scraped.
44. Prometheus remote reading: The ability for an external system to query Prometheus storage (TSDB) directly without PromQL evaluation
45. Prometheus federation: The ability for a Prometheus server to scrape selected time series from another Prometheus serve.
46. Prometheus remote writing: The ability for Prometheus to stream samples to an endpoint
47.