pipeline {
    agent any
    environment {
        HELM_VALUES_FILE = 'values.yaml'
    }
    parameters {
        string(name: 'REPO_NAME', defaultValue: 'https://github.com/maifujalam/k8s_aws.git', description: 'Enter the git remote name')
        string(name: 'BRANCH_NAME', defaultValue: 'master', description: 'Enter the branch name to pull from')
        string(name: 'FOLDER_PATH', defaultValue: 'k8s/v1.30.5/manifests', description: 'Enter the folder path name which to be helm build')
    }
    stages {
        stage('Git Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "${params.BRANCH_NAME}"]],
                    userRemoteConfigs: [[url: "${params.REPO_NAME}"]]
                ])
            }
        }
        stage('Render Helm Chart') {
            steps {
                script {
                    dir("${params.FOLDER_PATH}") {
                        echo "Folder to render: ${params.FOLDER_PATH}";
                        def output = sh(script: 'pwd;helm version;' , returnStdout: true).trim()
                        echo "Output: ${output}"
                        try {
                            // Run helm template command
                            def template_output = sh(script: 'helm template . -f ${HELM_VALUES_FILE}', returnStdout: true).trim()
                            echo "Helm template output:\n${template_output}"
                            echo "\n\nHelm template validation passed.\n"
                        } catch (Exception e) {
                            error("Helm template validation failed: ${e}")
                        }
                    }
                }
            }
        }

        stage('Build Helm Chart') {
            steps {
                script {
                    // Build and package the Helm chart
                    dir("${params.FOLDER_PATH}") {
                        echo "Folder to build: ${params.FOLDER_PATH}";
                        try {
                            // Run helm template command
                            def lint_output = sh(script: 'helm lint .', returnStdout: true).trim()
                            echo "Helm lint output:\n${lint_output}"
                            echo "\n\nHelm lint successful.\n"
                        } catch (Exception e) {
                            error("Helm lint failed: ${e}")
                        }
                        try {
                            // Run helm template command
                            def package_output = sh(script: 'helm lint .', returnStdout: true).trim()
                            echo "Helm lint output:\n${lint_output}"
                            echo "\n\nHelm lint successful.\n"
                        } catch (Exception e) {
                            error("Helm package failed: ${e}")
                        }
                    }
                }
            }
        }

        stage('Push Helm Chart') {
            steps {
                script {
                    // Push the packaged chart to a Helm repository (if required)
                    // Replace this with actual commands if you're pushing to a repository
                    echo "Pushing Helm chart to repository"
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished"
        }
        failure {
            echo "Pipeline failed"
        }
        success {
            echo "Helm chart build successful"
        }
    }
}

